#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
env_dir=$(cd "$3/" && pwd)

for key in SENTRY_AUTH_TOKEN SENTRY_ORG SENTRY_PROJECT; do
    [[ -f "${env_dir}/${key}" ]] && export "$key=$(cat "${env_dir}/${key}")"
    [[ -z "${!key}" ]] && echo "-----> ${key} is missing or empty: unable to continue." && exit 1
done

# Prepare what we need
JQ="${cache}/sentry-jq"
if [[ ! -f "${JQ}" ]]; then
    echo "-----> Downloading jq 1.5"
    curl -sSfL "https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64" > "${JQ}"
    chmod +x "${JQ}"
fi

API="https://sentry.io/api/0/projects/${SENTRY_ORG}/${SENTRY_PROJECT}"

# Check if release exists
echo "-----> Checking if Sentry release ${SOURCE_VERSION} already exists"
release_check=$(curl -sSf "${API}/releases/${SOURCE_VERSION}/" \
  -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
  -o /dev/null -w "%{http_code}" || echo "404")

if [[ "$release_check" == "404" ]]; then
    # Create a release
    echo "-----> Creating Sentry release ${SOURCE_VERSION} for organization '${SENTRY_ORG}' in project '${SENTRY_PROJECT}'"

    curl -sSf "${API}/releases/" \
      -X POST \
      -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
      -H 'Content-Type: application/json' \
      -d "{\"version\": \"${SOURCE_VERSION}\"}" \
      >/dev/null
fi

files_check=$(curl -sSf "${API}/releases/${SOURCE_VERSION}/files/" \
  -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
  | ${JQ} '. | length')

if [[ "$files_check" -gt 0 ]]; then
    echo "-----> Release already has files. Exiting..."
    echo "       Done!"
    return 0
else
    echo "-----> Release exists but has no files. Proceeding with sourcemap upload."
fi

# Retrieve files
files=$(mktemp)
echo "       Retrieving existing files to $files"
curl -sSf "${API}/releases/${SOURCE_VERSION}/files/" \
     -X GET \
     -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
     > "$files"

# Upload the sourcemaps
cd "${build}/"

for map in $(find . -name '*.js.map' -not -path './node_modules/*' -not -path './.heroku/*' | cut -c 3-); do
    sum=$(sha1sum "./${map}" | cut -c -40)
    name="~/$(echo $map | cut -c 7-)"

    res=($(${JQ} -r ". | map(select(.name == \"~/${map}\")) | first | .id + \" \" + (.sha1 // \"\")" "${files}"))

    if [[ "${res[0]}" == "" ]]; then
        echo "       Uploading ${map} to Sentry"
        curl -sSf "${API}/releases/${SOURCE_VERSION}/files/" \
             -X POST \
             -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
             -F file=@"${map}" \
             -F name="${name}" \
             >/dev/null

    elif [[ "${res[1]}" != "${sum}" ]]; then
        echo "       Updating ${map} on Sentry"
        curl -sSf "${API}/releases/${SOURCE_VERSION}/files/${res[0]}/" \
             -X DELETE \
             -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
             >/dev/null
        curl -sSf "${API}/releases/${SOURCE_VERSION}/files/" \
             -X POST \
             -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
             -F file=@"${map}" \
             -F name="${name}" \
             >/dev/null

    else
        echo "       ${map} is up-to-date"
    fi
done

rm "${files}"
rm build/static/js/*.map || true

echo "       Done!"
